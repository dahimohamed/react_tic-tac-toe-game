{"version":3,"sources":["features/gameSlice.ts","app/store.ts","app/hooks.ts","utils/calculateWinner.ts","components/Square.tsx","components/Board.tsx","App.tsx","index.tsx"],"names":["initialState","history","Array","fill","currentMove","gameSlice","createSlice","name","reducers","play","state","action","nextHistory","slice","concat","_toConsumableArray","payload","length","jumpTo","_gameSlice$actions","actions","store","configureStore","reducer","game","gameReducer","useAppSelector","useSelector","calculateWinner","squares","lines","i","_lines$i","_slicedToArray","a","b","c","Square","_ref","value","onSquareClick","_jsx","className","onClick","children","Board","xIsNext","onPlay","handleClick","nextSquares","currentStatus","winner","_jsxs","_Fragment","App","dispatch","useDispatch","_useAppSelector","histry","moves","map","squares1","move","description","rootElement","document","getElementById","Error","createRoot","render","Provider","StrictMode"],"mappings":"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","file":"static/js/main.8718a9bb.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport type SquareValue = \"X\" | \"O\" | null;\nexport type SquaresArray = Array<SquareValue>;\n\nexport interface GameState {\n  history: SquaresArray[];\n  currentMove: number;\n}\n\nconst initialState: GameState = {\n  history: [Array(9).fill(null)],\n  currentMove: 0,\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    play: (state, action: PayloadAction<SquaresArray>) => {\n      const nextHistory = state.history.slice(0, state.currentMove + 1);\n\n      state.history = [...nextHistory, action.payload];\n      state.currentMove = state.history.length - 1;\n    },\n    jumpTo: (state, action: PayloadAction<number>) => {\n      state.currentMove = action.payload;\n    },\n  },\n});\n\nexport const { play, jumpTo } = gameSlice.actions;\n\nexport default gameSlice.reducer;\n","/* eslint-disable no-undef */\nimport { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport gameReducer from '../features/gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    game: gameReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use these hooks everywhere instead of useDispatch and useSelector\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const calculateWinner = (squares: Array<null | string>) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n};\n","import React from 'react';\n\ninterface Props {\n  value: string | null,\n  onSquareClick: () => void,\n};\n\nexport const Square: React.FC<Props> = ({ value, onSquareClick }) => {\n  return (\n    <button className=\"square\" onClick={onSquareClick}>\n      {value}\n    </button>\n  );\n};\n","import React from 'react';\nimport { SquaresArray } from 'src/features/gameSlice';\nimport { calculateWinner } from '../utils/calculateWinner';\nimport { Square } from './Square';\n\ninterface Props {\n  xIsNext: boolean;\n  squares: SquaresArray;\n  onPlay: (squares: any) => void;\n}\n\nexport const Board: React.FC<Props> = ({ xIsNext, squares, onPlay }) => {\n  function handleClick(i: number) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    const nextSquares = squares.slice();\n\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n\n  const winner = calculateWinner(squares);\n  let currentStatus;\n\n  if (winner) {\n    currentStatus = 'Winner: ' + winner;\n  } else {\n    currentStatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n\n  return (\n    <>\n      <div className=\"status\">{currentStatus}</div>\n      <div className=\"board-row\">\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n      </div>\n      <div className=\"board-row\">\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n      </div>\n    </>\n  );\n};\n","import { useAppDispatch, useAppSelector } from './app/hooks';\nimport { RootState } from './app/store';\nimport { Board } from './components/Board';\nimport { jumpTo, play, SquaresArray } from './features/gameSlice';\n\nexport const App = () => {\n  const dispatch = useAppDispatch();\n  const { history: histry, currentMove }\n    = useAppSelector((state: RootState) => state.game);\n\n  const squares: SquaresArray = histry[currentMove];\n  const xIsNext = currentMove % 2 === 0;\n\n  const handlePlay = (nextSquares: SquaresArray) => {\n    dispatch(play(nextSquares));\n  };\n\n  const handleJumpTo = (nextMove: number) => {\n    dispatch(jumpTo(nextMove));\n  };\n\n  const moves = histry.map((squares1, move) => {\n    let description: string;\n\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n\n    return (\n      <li key={move}>\n        <button onClick={() => handleJumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board xIsNext={xIsNext} squares={squares} onPlay={handlePlay} />\n      </div>\n      <div className=\"game-info\">\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n};\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport './styles.css';\n\nimport { App } from './App';\n\nconst rootElement = document.getElementById('root');\n\nif (!rootElement) {\n  throw new Error('Could not find root element');\n}\n\nconst root = createRoot(rootElement);\n\nroot.render(\n  <Provider store={store}>\n    <StrictMode>\n      <App />\n    </StrictMode>\n  </Provider>,\n);\n"],"sourceRoot":""}